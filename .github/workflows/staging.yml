name: Build and deploy staging

on:
  push:
    branches:
      - staging
env:
  DEPLOYMENT: ticket-office
  DEPLOYMENT_NAMESPACE: ticket-office
  DEPLOYMENT_URL: https://ticket-office.staging.dataesr.ovh
  MM_NOTIFICATION_CHANNEL: bots

jobs:
  publish-ghcr:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: ü™ö Build app
        run: |
          npm install
          npm run build

      - name: üîë Login Docker
        run: docker login ghcr.io -u ${{ github.actor }} -p ${{ secrets.GITHUB_TOKEN }}

      - name: üê≥ Build Docker image
        run: |
          IMAGE_ID=ghcr.io/dataesr/ticket-office
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')
          docker build Dockerfile -t $IMAGE_ID:staging . --build-arg VITE_SCANR_API_AUTHORIZATION=${{ secrets.VITE_SCANR_API_AUTHORIZATION }} .

      - name: üì¶ Push Docker image
        run: |
          IMAGE_ID=ghcr.io/dataesr/ticket-office
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')
          docker push $IMAGE_ID:staging

  deploy:
    name: üí≠ Update staging deployment
    runs-on: ubuntu-latest
    needs: publish-ghcr
    steps:
      - name: Deploy to Cluster
        id: kubectl-deploy
        uses: dataesr/kubectl-deploy@v1.1
        env:
          KUBE_CONFIG: ${{ secrets.KUBE_CONFIG_DOAD_STAGING }}
        with:
          namespace: ${{ env.DEPLOYMENT_NAMESPACE }}
          restart: ${{ env.DEPLOYMENT }}

  notify:
    name: üì¢ Notify in mattermost channel
    needs: deploy
    if: always()
    runs-on: ubuntu-latest
    steps:
      - uses: dataesr/mm-notifier-action@v1.0.2
        with:
          github_token: ${{ secrets.GITHUB_TOKEN}}
          mattermost_webhook_url: ${{ secrets.MATTERMOST_WEBHOOK_URL }}
          mattermost_channel: ${{ env.MM_NOTIFICATION_CHANNEL}}
          deployment_url: ${{ env.DEPLOYMENT_URL }}
